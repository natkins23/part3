{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Notification.js","components/Filter.js","services/person.js","App.js","index.js"],"names":["Persons","persons","deletePerson","map","person","name","number","onClick","id","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Notification","notification","className","message","Filter","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","filterString","setStringFilter","setNotification","useEffect","personService","notifyWith","setTimeout","personsToShow","length","filter","p","toLowerCase","indexOf","event","target","preventDefault","existing","find","window","confirm","retunedPerson","addedPerson","concat","catch","error","console","log","toDelete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c3b68a8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Persons = ({ persons, deletePerson }) => {\r\n  return persons.map((person) => (\r\n    <p key={person.id}>\r\n      {person.name} {person.number}\r\n      <button onClick={() => deletePerson(person.id)}>delete</button>\r\n    </p>\r\n  ))\r\n}\r\n\r\nexport default Persons\r\n","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.addPerson}>\r\n      <div>\r\n        name:\r\n        <input value={props.newName} onChange={props.handleNameChange} />\r\n      </div>\r\n      <div>\r\n        number:\r\n        <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type='submit'>add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Notification = ({ notification }) => {\r\n  if (notification === null) {\r\n    return null\r\n  }\r\n\r\n  return <div className={notification.type}>{notification.message}</div>\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n  return <input value={props.value} onChange={props.onChange} />\r\n}\r\n\r\nexport default Filter\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then((response) => {\r\n    return response.data\r\n  })\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then((response) => response.data)\r\n}\r\n// eslint-disable-next-line\r\nexport default { getAll, create, update, remove }\r\n","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\nimport personService from './services/person'\n\n//need to start the server\n//npx json-server --port 3001 --watch db.json\n\nconst App = () => {\n  //persons and setPersons determine the state of the number of people objects that are on the dom\n  const [persons, setPersons] = useState([])\n  //newname and setNewname determine the state of the input field\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  //state of the filter input feild\n  const [filterString, setStringFilter] = useState('')\n  //notification starts as null, but when we set a notification it tells us what we did when we did it. and goes back to null after 5 sec\n\n  const [notification, setNotification] = useState(null)\n\n  //using function in personService object to get data\n  //the getAll function is a axios get function\n  //axios.get(url).then(response=>response.data)\n  //this above function uses implicit return which we then do another then\n  //          // console.log(personService.getAll()) returns a promise, whose fullfillment would return an array of people\n  //.then(theData=>setPersons(data))\n  //use that data to set the person. this use effect is called every time the component is updated\n  \n  //when to use a use effect\n  // Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects\n  useEffect(() => {\n    personService.getAll().then((data) => {\n      setPersons(data)\n    })\n  }, [])\n\n  const notifyWith = (message, type = 'success') => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  //the newName variable changes with the input\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterStringChange = (event) => {\n    setStringFilter(event.target.value)\n  }\n\n  //function that takes an id\n\n  const deletePerson = (id) => {\n    //returns the object of the person we want to find\n    const toDelete = persons.find((p) => p.id === id)\n\n    //gets a true or false confirmation from the user\n    const ok = window.confirm(`Delete ${toDelete.name}`)\n\n    if (ok) {\n      //objectg\n      personService\n        .remove(id)\n        .then((response) => {\n          setPersons(persons.filter((p) => p.id !== id))\n          notifyWith(`Deleted ${toDelete.name}`)\n        })\n        //catching an error for the promise\n        .catch(() => {\n          setPersons(persons.filter((p) => p.id !== id))\n          notifyWith(`${toDelete.name} had already been removed`, 'error')\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const existing = persons.find((p) => p.name === newName)\n    if (existing) {\n      const ok = window.confirm(\n        `${existing.name} already in phonebook, replace the old number with new one?`\n      )\n      if (ok) {\n        personService\n          .update(existing.id, {\n            name: existing.name,\n            number: newNumber,\n          })\n          .then((retunedPerson) => {\n            setPersons(\n              persons.map((person) =>\n                person.id !== existing.id ? person : retunedPerson\n              )\n            )\n            notifyWith(`Changed number of  ${existing.name}`)\n            setNewName('')\n            setNewNumber('')\n          })\n      }\n    } else {\n      personService\n        .create({\n          name: newName,\n          number: newNumber,\n        })\n        .then((addedPerson) => {\n          setPersons(persons.concat(addedPerson))\n          notifyWith(`Added ${newName}`)\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch((error) => {\n          console.log(error.response.data.error)\n          notifyWith(`${error.response.data.error} `, 'error')\n        })\n    }\n  }\n\n  const personsToShow =\n    filterString.length === 0\n      ? persons\n      : persons.filter(\n          (p) => p.name.toLowerCase().indexOf(filterString.toLowerCase()) > 0\n        )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      filter shown with:\n      <Filter value={filterString} onChange={handleFilterStringChange} />\n      <h3>add a new</h3>\n      <PersonForm\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newNumber={newNumber}\n        newName={newName}\n        addPerson={addPerson}\n      />\n      <h3>Numbers</h3>\n      <Persons persons={personsToShow} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}